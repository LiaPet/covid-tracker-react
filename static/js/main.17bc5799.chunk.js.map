{"version":3,"sources":["InfoBox.js","LineGraph.js","utils.js","Map.js","Table.js","App.js","index.js"],"names":["InfoBox","active","isGreen","casesType","title","cases","total","props","toLocaleString","Card","className","onClick","CardContent","Typography","color","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","data","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","a","axios","get","fetchChartData","length","datasets","backgroundColor","borderColor","casesTypeColors","option","fillColor","multiplier","recovered","deaths","sortData","sort","b","showDataOnMap","map","country","Circle","center","countryInfo","lat","long","pathOptions","Math","sqrt","Popup","style","backgroundImage","flag","ChangeMap","zoom","useMap","setView","Map","countries","TileLayer","url","attribution","Table","height","src","alt","App","setCountries","selectedCountry","setSelectedCountry","setCountryInfo","tableData","setTableData","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","initialLoad","fetchedCountries","name","iso","iso2","sortedTableData","getCountries","onCountryChange","event","countryName","target","FormControl","Select","variant","onChange","MenuItem","i","e","todayCases","todayRecovered","todayDeaths","rootNode","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.17bc5799.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Card, CardContent, Typography } from '@material-ui/core';\r\nimport './InfoBox.css';\r\n\r\nconst InfoBox = ({ active, isGreen, casesType, title, cases, total, ...props }) => {\r\n\tif (cases) {\r\n\t\tcases = cases.toLocaleString('en');\r\n\t\ttotal = total.toLocaleString('en');\r\n\t}\r\n\treturn (\r\n\t\t<Card\r\n\t\t\tclassName={`infoBox ${active && 'infoBox--selected--'}${casesType}`}\r\n\t\t\tonClick={props.onClick}\r\n\t\t>\r\n\t\t\t<CardContent>\r\n\t\t\t\t<Typography className='infoBox__title' color='textSecondary'>\r\n\t\t\t\t\t{title}\r\n\t\t\t\t</Typography>\r\n\r\n\t\t\t\t<h2 className={`infoBox__cases ${isGreen && 'infoBox__cases--recovered'}`}>\r\n\t\t\t\t\t{cases}\r\n\t\t\t\t</h2>\r\n\r\n\t\t\t\t<Typography className='infoBox__total' color='textSecondary'>\r\n\t\t\t\t\t{total} Total\r\n\t\t\t\t</Typography>\r\n\t\t\t</CardContent>\r\n\t\t</Card>\r\n\t);\r\n};\r\n\r\nexport default InfoBox;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Line } from '@reactchartjs/react-chart.js';\r\nimport axios from 'axios';\r\nimport numeral from 'numeral';\r\nimport './LineGraph.css';\r\n\r\nconst options = {\r\n\tlegend: {\r\n\t\tdisplay: false,\r\n\t},\r\n\telements: {\r\n\t\tpoint: {\r\n\t\t\tradius: 0,\r\n\t\t},\r\n\t},\r\n\tmaintainAspectRatio: false,\r\n\ttooltips: {\r\n\t\tmode: 'index',\r\n\t\tintersect: false,\r\n\t\tcallbacks: {\r\n\t\t\tlabel: function (tooltipItem) {\r\n\t\t\t\treturn numeral(tooltipItem.value).format('+0,0');\r\n\t\t\t},\r\n\t\t},\r\n\t},\r\n\tscales: {\r\n\t\txAxes: [\r\n\t\t\t{\r\n\t\t\t\ttype: 'time',\r\n\t\t\t\ttime: {\r\n\t\t\t\t\tformat: 'MM/DD/YY',\r\n\t\t\t\t\ttooltipFormat: 'll',\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t],\r\n\t\tyAxes: [\r\n\t\t\t{\r\n\t\t\t\tgridLines: {\r\n\t\t\t\t\tdisplay: false,\r\n\t\t\t\t},\r\n\t\t\t\tticks: {\r\n\t\t\t\t\tcallback: function (value, index, values) {\r\n\t\t\t\t\t\treturn numeral(value).format('0a');\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t],\r\n\t},\r\n};\r\n\r\nconst buildChartData = (data, casesType = 'cases') => {\r\n\tlet chartData = [];\r\n\tlet lastDataPoint;\r\n\r\n\tfor (let date in data.cases) {\r\n\t\tif (lastDataPoint) {\r\n\t\t\tlet newDataPoint = {\r\n\t\t\t\tx: date,\r\n\t\t\t\ty: data[casesType][date] - lastDataPoint,\r\n\t\t\t};\r\n\t\t\tchartData.push(newDataPoint);\r\n\t\t}\r\n\t\tlastDataPoint = data[casesType][date];\r\n\t}\r\n\treturn chartData;\r\n};\r\n\r\nconst LineGraph = ({ casesType }) => {\r\n\tconst [data, setData] = useState({});\r\n\r\n\tuseEffect(() => {\r\n\t\tconst fetchChartData = async () => {\r\n\t\t\tconst { data } = await axios.get(\r\n\t\t\t\t'https://disease.sh/v3/covid-19/historical/all?lastdays=120'\r\n\t\t\t);\r\n\t\t\tlet chartData = buildChartData(data, casesType);\r\n\t\t\tsetData(chartData);\r\n\t\t};\r\n\t\tfetchChartData();\r\n\t}, [casesType]);\r\n\r\n\treturn (\r\n\t\t<div className='lineGraph'>\r\n\t\t\t<h3>Graph</h3>\r\n\t\t\t{data?.length > 0 && (\r\n\t\t\t\t<Line\r\n\t\t\t\t\tdata={{\r\n\t\t\t\t\t\tdatasets: [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tbackgroundColor: 'rgba(204,16,52,0.4)',\r\n\t\t\t\t\t\t\t\tborderColor: '#cc1034',\r\n\t\t\t\t\t\t\t\tdata: data,\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t}}\r\n\t\t\t\t\toptions={options}\r\n\t\t\t\t/>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default LineGraph;\r\n","import { Circle, Popup } from 'react-leaflet';\r\nimport numeral from 'numeral';\r\n\r\nconst casesTypeColors = {\r\n\tcases: {\r\n\t\toption: { color: '#cc1034', fillColor: '#cc1034' },\r\n\t\tmultiplier: 800,\r\n\t},\r\n\trecovered: {\r\n\t\toption: { color: '#7dd71d', fillColor: '#7dd71d' },\r\n\t\tmultiplier: 1200,\r\n\t},\r\n\tdeaths: {\r\n\t\toption: { color: '#ff6c47', fillColor: '#ff6c47' },\r\n\t\tmultiplier: 2000,\r\n\t},\r\n};\r\n\r\nexport const sortData = (data) => {\r\n\tconst sortedData = [...data];\r\n\r\n\treturn sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n};\r\n\r\n// Draw circles on map\r\nexport const showDataOnMap = (data, casesType = 'cases') =>\r\n\tdata.map((country) => (\r\n\t\t<Circle\r\n\t\t\tcenter={[country.countryInfo.lat, country.countryInfo.long]}\r\n\t\t\tpathOptions={casesTypeColors[casesType].option}\r\n\t\t\tradius={Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier}\r\n\t\t>\r\n\t\t\t<Popup>\r\n\t\t\t\t<div className='info-container'>\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tclassName='info-flag'\r\n\t\t\t\t\t\tstyle={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n\t\t\t\t\t></div>\r\n\t\t\t\t\t<div className='info-name'>{country.country}</div>\r\n\t\t\t\t\t<div className='info-confirmed'>\r\n\t\t\t\t\t\tCases: {numeral(country.cases).format('0,0')}{' '}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className='info-recovered'>\r\n\t\t\t\t\t\tRecovered: {numeral(country.recovered).format('0,0')}{' '}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className='info-deaths'>\r\n\t\t\t\t\t\tDeaths: {numeral(country.deaths).format('0,0')}{' '}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</Popup>\r\n\t\t</Circle>\r\n\t));\r\n","import React from 'react';\r\nimport { MapContainer as LeafletMap, TileLayer, useMap } from 'react-leaflet';\r\nimport { showDataOnMap } from './utils';\r\nimport './Map.css';\r\n\r\nconst ChangeMap = ({ center, zoom }) => {\r\n\tconst map = useMap();\r\n\tmap.setView(center, zoom);\r\n\treturn null;\r\n};\r\n\r\nconst Map = ({ countries, casesType, center, zoom }) => {\r\n\treturn (\r\n\t\t<div className='map'>\r\n\t\t\t<LeafletMap center={center} zoom={zoom}>\r\n\t\t\t\t<ChangeMap center={center} zoom={zoom} />\r\n\t\t\t\t<TileLayer\r\n\t\t\t\t\turl='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\r\n\t\t\t\t\tattribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n\t\t\t\t/>\r\n\t\t\t\t{showDataOnMap(countries, casesType)}\r\n\t\t\t</LeafletMap>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Map;\r\n","import React from 'react';\r\nimport './Table.css';\r\n\r\nconst Table = ({ countries }) => {\r\n\treturn (\r\n\t\t<div className='table'>\r\n\t\t\t{countries.map(({ country, cases, countryInfo }) => (\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td>\r\n\t\t\t\t\t\t<img height='20px' src={countryInfo.flag} alt={country.country} />\r\n\t\t\t\t\t</td>\r\n\t\t\t\t\t<td> {country} </td>\r\n\t\t\t\t\t<td>\r\n\t\t\t\t\t\t<strong>{cases.toLocaleString('en')}</strong>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Table;\r\n","import 'leaflet/dist/leaflet.css';\r\n\r\nimport './App.css';\r\n\r\nimport axios from 'axios';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Card, CardContent, FormControl, MenuItem, Select } from '@material-ui/core';\r\n\r\nimport InfoBox from './InfoBox';\r\nimport LineGraph from './LineGraph';\r\nimport Map from './Map';\r\nimport Table from './Table';\r\nimport { sortData } from './utils';\r\n\r\nconst App = () => {\r\n\tconst [countries, setCountries] = useState([]);\r\n\tconst [selectedCountry, setSelectedCountry] = useState('worldwide');\r\n\tconst [countryInfo, setCountryInfo] = useState({});\r\n\tconst [tableData, setTableData] = useState([]);\r\n\tconst [mapCenter, setMapCenter] = useState([0, 0]);\r\n\tconst [mapZoom, setMapZoom] = useState(3);\r\n\tconst [mapCountries, setMapCountries] = useState([]);\r\n\tconst [casesType, setCasesType] = useState('cases');\r\n\r\n\tuseEffect(() => {\r\n\t\tasync function initialLoad() {\r\n\t\t\tconst { data } = await axios.get('https://disease.sh/v3/covid-19/all');\r\n\t\t\tsetCountryInfo(data);\r\n\t\t}\r\n\t\tinitialLoad();\r\n\t}, []);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst getCountries = async () => {\r\n\t\t\tconst { data } = await axios.get('https://disease.sh/v3/covid-19/countries');\r\n\t\t\tconst fetchedCountries = data.map((country) => ({\r\n\t\t\t\tname: country.country,\r\n\t\t\t\tiso: country.countryInfo.iso2,\r\n\t\t\t\tflag: country.countryInfo.flag,\r\n\t\t\t}));\r\n\t\t\tconst sortedTableData = sortData(data);\r\n\t\t\tsetTableData(sortedTableData);\r\n\t\t\tsetMapCountries(data);\r\n\t\t\tsetCountries(fetchedCountries);\r\n\t\t};\r\n\t\tgetCountries();\r\n\t}, []);\r\n\r\n\tconst onCountryChange = async (event) => {\r\n\t\tconst countryName = event.target.value;\r\n\t\tconst url =\r\n\t\t\tcountryName === 'worldwide'\r\n\t\t\t\t? 'https://disease.sh/v3/covid-19/all'\r\n\t\t\t\t: `https://disease.sh/v3/covid-19/countries/${countryName}`;\r\n\r\n\t\tconst { data } = await axios.get(url);\r\n\t\tsetSelectedCountry(countryName);\r\n\t\tsetCountryInfo(data);\r\n\r\n\t\tcountryName === 'worldwide'\r\n\t\t\t? setMapCenter([34.80746, -40.4796])\r\n\t\t\t: setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\r\n\t\tcountryName === 'worldwide' ? setMapZoom(3) : setMapZoom(4);\r\n\t};\r\n\treturn (\r\n\t\t<div className='app'>\r\n\t\t\t<div className='app__left'>\r\n\t\t\t\t{/* Header Component */}\r\n\t\t\t\t<div className='app__header'>\r\n\t\t\t\t\t<h1>COVID-19 TRACKER</h1>\r\n\t\t\t\t\t<FormControl className='app__dropdown'>\r\n\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\tvariant='outlined'\r\n\t\t\t\t\t\t\tvalue={selectedCountry}\r\n\t\t\t\t\t\t\tonChange={onCountryChange}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<MenuItem value='worldwide'> Worldwide</MenuItem>\r\n\t\t\t\t\t\t\t{countries.length > 0 &&\r\n\t\t\t\t\t\t\t\tcountries.map((country, i) => (\r\n\t\t\t\t\t\t\t\t\t<MenuItem value={country.iso} key={i}>\r\n\t\t\t\t\t\t\t\t\t\t<img\r\n\t\t\t\t\t\t\t\t\t\t\theight='15px'\r\n\t\t\t\t\t\t\t\t\t\t\tsrc={country.flag}\r\n\t\t\t\t\t\t\t\t\t\t\talt={`${country.name} flag`}\r\n\t\t\t\t\t\t\t\t\t\t/>{' '}\r\n\t\t\t\t\t\t\t\t\t\t{country.name}\r\n\t\t\t\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t</FormControl>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className='app__stats'>\r\n\t\t\t\t\t<InfoBox\r\n\t\t\t\t\t\tactive={casesType === 'cases'}\r\n\t\t\t\t\t\tcasesType={casesType}\r\n\t\t\t\t\t\tonClick={(e) => setCasesType('cases')}\r\n\t\t\t\t\t\ttitle='Coronavirus cases'\r\n\t\t\t\t\t\tcases={countryInfo.todayCases}\r\n\t\t\t\t\t\ttotal={countryInfo.cases}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<InfoBox\r\n\t\t\t\t\t\tisGreen\r\n\t\t\t\t\t\tactive={casesType === 'recovered'}\r\n\t\t\t\t\t\tcasesType={casesType}\r\n\t\t\t\t\t\tonClick={(e) => setCasesType('recovered')}\r\n\t\t\t\t\t\ttitle='Recovered'\r\n\t\t\t\t\t\tcases={countryInfo.todayRecovered}\r\n\t\t\t\t\t\ttotal={countryInfo.recovered}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<InfoBox\r\n\t\t\t\t\t\tactive={casesType === 'deaths'}\r\n\t\t\t\t\t\tcasesType={casesType}\r\n\t\t\t\t\t\tonClick={(e) => setCasesType('deaths')}\r\n\t\t\t\t\t\ttitle='Deaths'\r\n\t\t\t\t\t\tcases={countryInfo.todayDeaths}\r\n\t\t\t\t\t\ttotal={countryInfo.deaths}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<Map\r\n\t\t\t\t\tcasesType={casesType}\r\n\t\t\t\t\tcountries={mapCountries}\r\n\t\t\t\t\tcenter={mapCenter}\r\n\t\t\t\t\tzoom={mapZoom}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\r\n\t\t\t<Card className='app__right'>\r\n\t\t\t\t<CardContent>\r\n\t\t\t\t\t<h3>Live Cases by Country</h3>\r\n\t\t\t\t\t<Table countries={tableData} />\r\n\t\t\t\t</CardContent>\r\n\t\t\t\t<CardContent>\r\n\t\t\t\t\t<h3>Worldwide new {casesType}</h3>\r\n\t\t\t\t\t<LineGraph casesType={casesType} />\r\n\t\t\t\t</CardContent>\r\n\t\t\t</Card>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","// import { StrictMode } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nconst rootNode = document.getElementById('root');\r\nReactDOM.render(\r\n\t// <StrictMode>\r\n\t<App />,\r\n\t// </StrictMode>,\r\n\trootNode\r\n);\r\n"],"sourceRoot":""}